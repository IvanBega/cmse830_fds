import pandas as pd
import numpy as np
import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from datasource import *

st.set_page_config(page_title="Heart Disease Risk Analysis")
st.markdown("Risk Analysis Dashboard")

df = load_oversampled()
df_copy = decode_df(df)

filtered_df = df_copy.copy()

with st.sidebar:
    st.header("Filter")
    
    age_range = st.slider("Age Range",18,80, value=(18,80))
    gender = st.multiselect("Gender", ["Male", "Female"])
    smoking = st.checkbox("Smoking?")
    diabetes = st.checkbox("Diabetes?")
    hbp = st.checkbox("High Blood Pressure?")
    stress = st.selectbox("Stress Level", ["Any", "Low", "Medium", "High"])
    bmi = st.slider("BMI Range",20,40,(20,40))
    
    
# This section was generated by ChatGPT 4o on 10/13/2025 based on the sidebar above
#####################################
# 1. Age range filter
filtered_df = filtered_df[
    (filtered_df['Age'] >= age_range[0]) & (filtered_df['Age'] <= age_range[1])
]

# 2. Gender filter (multiselect)
if gender:  # only filter if user selected something
    filtered_df = filtered_df[filtered_df['Gender'].isin(gender)]

# 3. Smoking filter (checkbox)
if smoking:  # if checked, keep only smokers
    filtered_df = filtered_df[filtered_df['Smoking'] == 'Yes']  # or 1 if encoded

# 4. Diabetes filter (checkbox)
if diabetes:
    filtered_df = filtered_df[filtered_df['Diabetes'] == 'Yes']  # or 1 if encoded

# 5. High Blood Pressure filter (checkbox)
if hbp:
    filtered_df = filtered_df[filtered_df['High Blood Pressure'] == 'Yes']  # or 1 if encoded

# 6. Stress Level filter (selectbox)
if stress != "Any":
    filtered_df = filtered_df[filtered_df['Stress Level'] == stress]

# 7. BMI range filter
filtered_df = filtered_df[
    (filtered_df['BMI'] >= bmi[0]) & (filtered_df['BMI'] <= bmi[1])
]
# End of ChatGPT generated section
#####################################
st.subheader("Filtered Population")
st.write("Below you can see how the population changes based on selected filters")
col1, col2, col3 = st.columns(3)

with col1:
    st.metric("Total Filtered", len(filtered_df))
    
with col2:
    count = len(filtered_df[filtered_df['Heart Disease Status'] == 'Yes'])
    rate = count / len(filtered_df) * 100
    st.metric("Rate of Heart Disease", f"{rate:.1f}%")

with col3:
    s_count = len(filtered_df[filtered_df['is_synthetic'] == 1])
    s_rate = (s_count / len(filtered_df)) * 100
    st.metric("Percentage of Synthetic Records", f"{s_rate:.1f}%")