import pandas as pd
import numpy as np
import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from datasource import *

st.set_page_config(page_title="Heart Disease Risk Analysis")
st.markdown("Risk Analysis Dashboard")

# Load both datasets
df = load_oversampled()
df_copy = decode_df(df)
country_df = load_country()

filtered_df = df_copy.copy()

with st.sidebar:
    st.header("Filter")
    
    age_range = st.slider("Age Range",18,80, value=(18,80))
    gender = st.multiselect("Gender", ["Male", "Female"])
    smoking = st.checkbox("Smoking?")
    diabetes = st.checkbox("Diabetes?")
    hbp = st.checkbox("High Blood Pressure?")
    stress = st.selectbox("Stress Level", ["Any", "Low", "Medium", "High"])
    bmi = st.slider("BMI Range",20,40,(20,40))
    
    # NEW: Country comparison filter
    st.subheader("Country Comparison")
    selected_countries = st.multiselect(
        "Compare with Countries",
        options=country_df['country'].unique(),
        default=['United States', 'Ukraine', 'United Kingdom', 'Egypt', 'Turkmenistan', 'Germany']
    )
    
# This section was generated by ChatGPT 4o on 10/13/2025 based on the sidebar above
#####################################
filtered_df = filtered_df[(filtered_df['Age'] >= age_range[0]) & (filtered_df['Age'] <= age_range[1])]
if gender:  
    filtered_df = filtered_df[filtered_df['Gender'].isin(gender)]

if smoking:  
    filtered_df = filtered_df[filtered_df['Smoking'] == 'Yes'] 

if diabetes:
    filtered_df = filtered_df[filtered_df['Diabetes'] == 'Yes'] 

if hbp:
    filtered_df = filtered_df[filtered_df['High Blood Pressure'] == 'Yes']

if stress != "Any":
    filtered_df = filtered_df[filtered_df['Stress Level'] == stress]

filtered_df = filtered_df[
    (filtered_df['BMI'] >= bmi[0]) & (filtered_df['BMI'] <= bmi[1])
]
# End of ChatGPT generated section
#####################################

st.subheader("Filtered Population")
st.write("Below you can see how the population changes based on selected filters")
col1, col2, col3 = st.columns(3)

with col1:
    st.metric("Total Filtered", len(filtered_df))
    
with col2:
    count = len(filtered_df[filtered_df['Heart Disease Status'] == 'Yes'])
    rate = count / len(filtered_df) * 100 if len(filtered_df) > 0 else 0
    st.metric("Rate of Heart Disease", f"{rate:.1f}%")

with col3:
    s_count = len(filtered_df[filtered_df['is_synthetic'] == 1])
    s_rate = (s_count / len(filtered_df)) * 100 if len(filtered_df) > 0 else 0
    st.metric("Percentage of Synthetic Records", f"{s_rate:.1f}%")
    
# Original BMI visualization
st.subheader("BMI Distribution by Heart Disease Status")
st.write("Two boxplots demonstrate the dependency between Heart Disease and BMI, since BMI had the highest correlation with disease")
fig = px.box(filtered_df, x='Heart Disease Status', y='BMI',
                title='',
                color='Heart Disease Status',
                color_discrete_map={'Yes': 'red', 'No': 'blue'})
st.plotly_chart(fig, use_container_width=True)

# This part below was generated by DeepSeek on 10/18/2025
################################################
if selected_countries:
    st.subheader("Country-Level Heart Disease Statistics")
    st.write("Comparison of heart disease rates between countries to see how the filtered group stands relative to the entire population")
    # Filter country data for selected countries
    country_comparison_df = country_df[country_df['country'].isin(selected_countries)]
    
    # Create comparison chart
    col1, col2 = st.columns(2)
    
    with col1:
        # Bar chart comparing standardized rates
        st.write("Heart disease rates per 100,000 population in each country")
        fig_country = px.bar(
            country_comparison_df,
            x='country',
            y='std_rate_2022',
            title='Age-Standardized Heart Disease Rates (2022)',
            color='std_rate_2022',
            color_continuous_scale='Reds',
            labels={'std_rate_2022': 'Rate per 100k', 'country': 'Country'}
        )
        fig_country.update_layout(showlegend=False)
        st.plotly_chart(fig_country, use_container_width=True)
    
    with col2:
        # Compare filtered population rate with country averages
        if len(filtered_df) > 0:
            st.write("How filtered group compares to country averages")
            filtered_rate = count / len(filtered_df) * 100
            
            # Create comparison data
            comparison_data = []
            for _, row in country_comparison_df.iterrows():
                comparison_data.append({
                    'Group': row['country'],
                    'Heart Disease Rate': row['std_rate_2022'] / 10  # Convert to percentage scale
                })
            
            # Add filtered population as a data point
            comparison_data.append({
                'Group': 'Filtered Population',
                'Heart Disease Rate': rate
            })
            
            comparison_df = pd.DataFrame(comparison_data)
            
            fig_comparison = px.bar(
                comparison_df,
                x='Group',
                y='Heart Disease Rate',
                title='Comparison: Filtered Population vs Countries',
                color='Group',
                color_discrete_map={'Filtered Population': 'blue'},
                labels={'Heart Disease Rate': 'Heart Disease Rate (%)'}
            )
            st.plotly_chart(fig_comparison, use_container_width=True)
    
    # Additional country metrics in an expander
    with st.expander("View Detailed Country Statistics"):
        st.write("Table with detailed numbers for each country's heart disease metrics")
        display_cols = ['country', 'std_rate_2022', 'dalys_2021', 'deaths_2021', 'prevalence_2021']
        st.dataframe(
            country_comparison_df[display_cols].rename(columns={
                'std_rate_2022': 'Std Rate 2022',
                'dalys_2021': 'DALYs 2021',
                'deaths_2021': 'Deaths 2021', 
                'prevalence_2021': 'Prevalence 2021'
            }).style.format({
                'Std Rate 2022': '{:.1f}',
                'DALYs 2021': '{:.1f}',
                'Deaths 2021': '{:.1f}',
                'Prevalence 2021': '{:.1f}'
            })
        )
        
        st.caption("Note: Country rates are per 100,000 population. Filtered population rate is shown as percentage.")

else:
    st.info("Select countries from the sidebar to enable country comparison features.")

# Risk factor correlation with country data (optional additional insight)
if len(filtered_df) > 0 and len(selected_countries) > 0:
    st.subheader("Risk Factor Analysis")
    st.write("This allows us to see which risk factors are most common in filtered population")
    # Calculate risk factors in filtered population
    risk_factors = {
        'High BMI (>30)': (filtered_df['BMI'] > 30).mean() * 100,
        'Smokers': (filtered_df['Smoking'] == 'Yes').mean() * 100,
        'Diabetic': (filtered_df['Diabetes'] == 'Yes').mean() * 100,
        'High BP': (filtered_df['High Blood Pressure'] == 'Yes').mean() * 100
    }
    
    risk_df = pd.DataFrame({
        'Risk Factor': list(risk_factors.keys()),
        'Percentage': list(risk_factors.values())
    })
    
    fig_risk = px.bar(
        risk_df, 
        x='Risk Factor', 
        y='Percentage',
        title='Risk Factor Prevalence in Filtered Population',
        color='Percentage',
        color_continuous_scale='Oranges'
    )
    st.plotly_chart(fig_risk, use_container_width=True)
    
# End of DeepSeek generated section
#########################################