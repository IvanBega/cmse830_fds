import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import streamlit as st
from datasource import *
import plotly.express as px
import altair as alt

st.set_page_config(page_title="Correlation Analysis", page_icon="*")

df = load_oversampled()

st.write("Below we can see the correlation between all features in the Heart Disease dataset")
fig, ax = plt.subplots(figsize=(8,  6))
df = df.drop('is_synthetic', axis=1)
sns.heatmap(df.corr(), annot=True, cmap='coolwarm', ax=ax, annot_kws={"size": 5})
st.pyplot(fig)

st.write("Features with the highest correlation related to Heart Disease status are the following:")

# ChatGPT 4o was used on 10/13/2025 to compute 'top_features'
top_featues = (df.corr()['Heart Disease Status_encoded'].drop('Heart Disease Status_encoded')
               .abs().sort_values(ascending=False).head(5))

st.dataframe(top_featues)

binary_features = ['Smoking_encoded', 'Diabetes_encoded', 'High Blood Pressure_encoded', 'Gender_encoded']

# Code below was generated by ChatGPT 4o to make a grid 2 by 2 with four plots
fig, axes = plt.subplots(2, 2, figsize=(10, 8))
axes = axes.flatten()

for i, feature in enumerate(binary_features[:4]):  # only take first 4 features
    ax = axes[i]
    sns.countplot(data=df, x=feature, hue='Heart Disease Status_encoded', ax=ax)
    ax.set_title(f"{feature} vs Heart Disease Status")
    ax.set_xlabel(feature)
    ax.set_ylabel("Count")
    ax.legend(title="Heart Disease Status", labels=["No", "Yes"])
    if i < 3:
        ax.set_xticklabels(["No", "Yes"])
    else:
        ax.set_xticklabels(["Male", "Female"])

# Remove any unused subplots (if less than 4 features)
for j in range(len(binary_features), 4):
    fig.delaxes(axes[j])

plt.tight_layout()
st.pyplot(fig)




# ChatGPT 4o was used to help create probability plot
# In particular, I asked how to use bins properly
df['BMI_bin'] = pd.cut(df['BMI'], bins=np.arange(20, 42, 2))
bin_summary = df.groupby('BMI_bin')['Heart Disease Status_encoded'].mean().reset_index()
bin_summary.rename(columns={'Heart Disease Status_encoded': 'probability_yes'}, inplace=True)

st.markdown("### The chart below demonstrates the probability of a person having heart issue based on their BMI")
chart = alt.Chart(bin_summary).mark_line(point=True).encode(
    x='BMI_bin:N',
    y='probability_yes:Q'
).properties(
    width=600,
    height=400,
    title='Probability of Heart Disease vs BMI'
)

st.altair_chart(chart)